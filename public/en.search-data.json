{"/hanshin-cyber/about-me/":{"data":{"":"","inspiration-behind#Inspiration behind":"","lets-connect#Let\u0026rsquo;s Connect":" whoami Hi, I’m a final-year cybersecurity student with a strong passion for building a safer digital world. This website is a journal of my personal journey into cybersecurity—a space where I document the skills I’m developing, the challenges I’m tackling, and the lessons I’m learning along the way. Inspiration behind While university gave me a starting point, I quickly realized that the curriculum alone wasn’t enough to prepare for the fast-paced demands of the cybersecurity field. That realization led me to take initiative—diving deep into self-learning, participating in CTF competitions, and building real-world projects to sharpen my skills.\nMy goal is to become a cybersecurity leader, and this portfolio reflects the steps I’m taking to get there.\nLet’s Connect Come connect and hopefully further talk if you are interested in similar domain~\nConnect on LinkedIn"},"title":"About Me"},"/hanshin-cyber/research-study/post1/":{"data":{"":"","command-injection#Command injection":"Hello, this is my first reseach-study blog post ;p Currently solving a server side security wargame (doing the writeup soon)\nRobots Exclusion Protocol ℹ️ Standard used by websites to indicate which portions of website are allowed to visit for web crawlers and robots\nrobots.txt can be found https://www.example.com/robots.txt\nthe robots will try to fetch this file and read the instruction, if the file doesn’t exist means → no restrictions\nAI restrictions web operators start to ban robots collecting data to train AI models. In 2023, Originality.AI found that 306 of the thousand most-visited websites blocked OpenAI’s GPTBot in their robots.txt file.\nIn 2023, blog host Medium announced it would deny access to all artificial intelligence web crawlers as “AI companies have leached value from writers in order to spam Internet readers”. - https://www.theverge.com/24067997/robots-txt-ai-text-file-web-crawlers-spiders\nFormat Example Allow all content\nUser-agent: * Disallow: or\nUser-agent: * Allow: / or even a missing robots.txt file\nAll robots to stay out\nUser-agent: * Disallow: / Not to enter certain directories\nUser-agent: * Disallow: /cgi-bin/ Disallow: /tmp/ Disallow: /junk/ Not to enter one file\nUser-agent: * Disallow: /directory/file.html Specific robot “example: BadBot” to stay out\nUser-agent: BadBot Disallow: / Combined example\nUser-agent: googlebot # all Google services Disallow: /private/ # disallow this directory User-agent: googlebot-news # only the news service Disallow: / # disallow everything User-agent: * # any robot Disallow: /something/ # disallow this directory From the above example, all Google services are not allowed to access /private/ directory, news services are not allowed to access the whole site. Meanwhile any robots are not allowed to access /something/\nCommand injection ℹ️ command injection is a type of attach, the goal is to execute arbitrary commands on host operating system Happens when:\napplication passes unsafe user-supplied data like forms, cookies insufficient input validation Example:\n\u003c?php $ip = $_GET['ip']; system(\"ping -c 4 \" . $ip); ?\u003e If the attacker inputs 8.8.8.8; cat /etc/passwd , then it will pass to server hence executing cat /etc/passwd\nTools commixproject/commix - Automated All-in-One OS command injection and exploitation tool projectdiscovery/interactsh - An OOB interaction gathering server and client librarys ","robots-exclusion-protocol#Robots Exclusion Protocol":""},"title":"Server Side Security Notes"},"/hanshin-cyber/write-ups/":{"data":{"":"","check-these-out#Check These Out":"🙋🏼‍♀️ Welcome to write ups section, here I document my solving process of cybersec challanges - wargames, CTFs..\nPersonally I enjoyed challenging these a lot, and learnt bunch. And writing these down allow me to improve and solidify the knowledge too.\nHope you enjoy!\nCheck These Out Currently I am working on:\nBandit wargame ","heading#🙋🏼‍♀️":""},"title":"Write Ups"},"/hanshin-cyber/write-ups/overthewire/":{"data":{"":" OverTheWire has these wargames that really teaches you security fundamentals. I started off with Bandit, will include more writeups for other games in the future!! 🤗\nEnjoy learning~"},"title":"OverTheWire"},"/hanshin-cyber/write-ups/overthewire/bandit/":{"data":{"":"","introduction#Introduction":"","skills-involved#Skills Involved":"Introduction In OverTheWire’s Bandit wargame, players are to solve the challenge presented in each level to get the pass to next level. It is great practice to gain understanding and get more familiar with command-line skills~ As it is mainly conducted in Linux command panel.\nSkills Involved Command Line Proficiency SSH File Permissions Text Processing Scripting Network Basics 💭 In this section, contains my learning and thought process of solving each level~ "},"title":"Bandit"},"/hanshin-cyber/write-ups/overthewire/bandit/part-1/":{"data":{"":"","level-0---logging-in#Level 0 - Logging In":"","level-1---read-a-file#Level 1 - Read a File":"","level-2---special-character-filename#Level 2 - Special Character Filename":"","level-3---spaces-in-filename#Level 3 - Spaces in Filename":"","level-4---hidden-stuff#Level 4 - Hidden Stuff":"Level 0 - Logging In ❓Description\nLog into the game using SSH.\nHost to be connected: bandit.labs.overthewire.org\nPort: 2220\nusername: bandit0\npassword: bandit0\n📔Study\nssh is a program for logging into remote machine and also executing commands on remote machines. The objective of it is to provide secure and encrypted communications between two hosts, in this case, my pc and bandit server!\n💡 Solution\nI run ssh -p 2220 bandit0@bandit.labs.overthewire.org in my Linux terminal to ssh into the machine\n-p 2220 means specifying the port to connect\neach level in bandit is formatted in “bandit\u003clevel\u003e”, in this case bandit0\nLevel 1 - Read a File ❓Description\nThe password for the next level is stored in a file called - located in the home directory\n📔Study\nTip: to quickly understand the details usage of command we can use man command. From above man command will basically list down the information and the flags that can be specified.\nAnyways, here we study some of the basic Linux commands that involve accessing contents from directories and files.\npwd ➡ short for “print working directory”, it displays the full path of your current dir in Linux. Also we can easily view it on the left next to the username. Exp. bandit0@bandit:~$, here the ~ indicates the current working directory as the home directory of the user. ls ➡ one of the most used command, ls is used to list the contents of a directory, user is able to show files and directories. Below I list down some common options;\n🚩-a: Lists all files, including hidden ones (those starting with a “.”).\n🚩-l: Lists files in a long format, providing detailed information.\n🚩-R: Recursively lists the contents of subdirectories.\n🚩-t: Sorts files by modification time (newest first).\n🚩-r: Reverses the order of the output (e.g., from newest to oldest).\n🚩-h: Displays file sizes in a human-readable format (e.g., KB, MB).\n🚩-d: Lists the directory itself instead of its contents.\n🚩-1: Lists one file per line. cat ➡ used for user to display, concatenate and create files in their terminal. cat my_file.txt - print out file content cat file1.txt file2.txt \u003e combined.txt - combine both file content into combined.txt cat \u003e new_file.txt - create new file! 💡 Solution\nThere is a readme file in the directory, using cat to print the content, and here is the flag :)\nLevel 2 - Special Character Filename ❓Description\nThe password for the next level is stored in a file called spaces in this filename located in the home directory\n📔Study\nSince “-” is a special symbol (Standard Option Character) in Linux, it is also not recommended to start any filename with this symbol.\n💡 Solution\nTo read “-” file, cat - cant work From this answer we know that to read this file with a special name, specify the full path:\nLevel 3 - Spaces in Filename ❓Description\nThe password for the next level is stored in a file called spaces in this filename located in the home directory\n📔Study\nBesides “-”, \" \" spaces in filename is also not encouraged:\nbandit2@bandit:~$ cat spaces in this filename cat: spaces: No such file or directory cat: in: No such file or directory cat: this: No such file or directory cat: filename: No such file or directory We can see that the terminal interpret the spaces as a new additional file name/command.\nHence, to add spacial effect use:\n✅ underscore ( _ )\n✅ dash (-)\n💡 Solution\nTo allow the terminal to interpret the filename as a single file I use \" \"\nLevel 4 - Hidden Stuff ❓Description\nThe password for the next level is stored in a hidden file in the inhere directory\n💡 Solution\nAs seen in study note, since inhere is a hidden directory we use flag -a to show all directory: Observation\n🟡 upon entering the directory, using ls shoes nothing too…\n🟡 using -a flag again we finally found the file with password\nbandit3@bandit:~/inhere$ cat ...Hiding-From-You 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ "},"title":"Level 0 - 4"},"/hanshin-cyber/write-ups/overthewire/bandit/part-2/":{"data":{"":"","level-5---file-contents#Level 5 - File Contents":"","level-6---a-specific-file#Level 6 - A Specific File":"","level-7---no-permission#Level 7 - No Permission":"","level-8---find-a-word#Level 8 - Find a word":"","level-9---only-once#Level 9 - Only once":"Level 5 - File Contents ❓Description\nThe password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.\n📔Study\nwe study into file command:\nused to identify the type of file by examining its content rather than extension Displays a human-readable format (e.g., “ASCII text”) or a MIME type (e.g., “text/plain; charset=us-ascii”). Since we are at file commands: 💡 Solution\nIn the description we are hinted on only human-readable file, we use file command\nbandit4@bandit:~/inhere$ file ./* ./-file00: data ./-file01: data ./-file02: data ./-file03: data ./-file04: data ./-file05: data ./-file06: data ./-file07: ASCII text ./-file08: data ./-file09: data Got it✅\nLevel 6 - A Specific File ❓Description\nThe password for the next level is stored somewhere on the server and has all of the following properties:\nowned by user bandit7 owned by group bandit6 33 bytes in size 📔Study\nfind command is a very powerful tool provided by Linux, offering a wide array of options for searching files and directories\nNow we look into the basic options that make this command powerful:\n-name\nSearches for files and directories matching a specific name pattern (case-sensitive).\n💡 find . -name \"example.txt\" Searches the current and subdirectories for a file named “example.txt”. -iname\nCase-insensitive version of “-name”\n💡 find . -iname \"example.txt\": Searches for “example.txt” regardless of case. -type\nSpecifies the type of file to search for (e.g., f for regular files, d for directories).\n💡 find . -type f: Finds all regular files in the current directory. -path\nSearches for files or directories whose full path matches the pattern\n💡 find /home -path \"/home/user/documents/*\": Searches for files in the /home/user/ documents directory. -size\nFinds files of a specific size\n💡 find . -size +10M: Finds all files larger than 10MB. -user\nFinds files owned by a specific user.\n💡 find . -user john: Finds all files owned by the user “john”. -group\nFinds files belonging to a specific group.\n💡 find . -group staff: Finds all files belonging to the group “staff”. -perm\nFinds files with specific permissions. 💡 find . -perm 755: Finds all files with read, write, and execute permissions for owner, group, and others. 💡 Solution\nLet’s see what is in the directory\nSince there is a lot of folders, it is not really feasible to cd into them one by one, let’s directly find\nFound it! Just not sure why it says here owned by bandit5 but not 6 lol.\nbandit5@bandit:~/inhere$ cat ./maybehere07/.file2 HWasnPhtq9AVKe0dmk45nxy20cvUa6EG Level 7 - No Permission ❓Description\nThe password for the next level is stored somewhere on the server and has all of the following properties:\nowned by user bandit7 owned by group bandit6 33 bytes in size 📔Study\nWe look into file permission, which is the fundamental concept in Linux system:\nTake an example:\ndrwxr-xr-x 1 john staff 3771 Mar 31 2024 .bashrc john (third column) - user\nstaff(forth column) - group\nBreaking down d | rwx | r-x | r-x d indicates filetypd - in this case d irectory. If for regular file is a Permissions are groups into 3 bits each - user | group | other Permission glossary: r: readable w: writable x: executable (basically an executable program) -: empty 💡 Solution\nWe try finding\nSeems like there were a bunch of files across server fitting to the criteria, but we don’t have access…\n❓ What’s the difference of find . and find / ?\nAns: find . means you want to find files based on current directory;\nfind / means you want to find from root directory.\nfind * means “start with the visible contents of the directory”. A depth of 0 will be each of the visible items in the directory. To remove the noise of Permission denied error, we append 2\u003e/dev/null\nThis redirects any error messages (standard error stream) to /dev/null, effectively discarding them. This is useful for ignoring permission errors or other issues that might occur during the search.\n❓ What are the types of errors?\nAns: Every program we run on the command line automatically has three data streams connected to it.\nSTDIN (0) - Standard input (data fed into the program) STDOUT (1) - Standard output (data printed by the program, defaults to the terminal) STDERR (2) - Standard error (for error messages, also defaults to the terminal) Coming back\nbandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c 2\u003e/dev/null /var/lib/dpkg/info/bandit7.password bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj Level 8 - Find a word ❓Description\nThe password for the next level is stored in the file data.txt next to the word millionth\n📔Study\nHow to find certain word/text in a file?\n👍🏼grep command👍🏼\nExample: grep \"error\" logfile.txt ➡ searches for lines containing “error” in logfile.txt\nOption Key Feature Case-insensitive search -i for case-insensitive searching Recursive Search -r searching recursively with directories Line Number -n to display the line number with matching line Count Matches -c count the number of matching lines Invert Match -v to display lines that don’t match the pattern Exact Match -w find exact word matches Context -A, -B, -C display lines before, after, or both around the matching line 💡 Solution\nWe can see data.txt is wayyyy too large for us to search manually\nuse grep:\nbandit7@bandit:~$ grep \"millionth\" data.txt millionth dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc Level 9 - Only once ❓Description\nThe password for the next level is stored in the file data.txt and is the only line of text that occurs only once\n📔Study\nThe uniq command in Linux is used to filter out or report repeated lines in a file. It is commonly used in conjunction with the sort command because uniq only detects duplicate lines that are adjacent. Therefore, for the most effective use, lines should be sorted before using uniq.\n💡 Solution\nthe -u only outputs lines that are unique in the input"},"title":"Level 5 - 9"},"/hanshin-cyber/write-ups/overthewire/bandit/part-3/":{"data":{"":"","level-10---human-readable-strings#Level 10 - Human readable strings":"","level-11---base64-coded#Level 11 - Base64 coded":"","level-12---rot13#Level 12 - ROT13":"","level-13---hexdump#Level 13 - Hexdump":"","level-14---copy-private-key-to-local#Level 14 - COPY PRIVATE KEY TO LOCAL":"Level 10 - Human readable strings ❓Description\nThe password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.\n📔Study\nThe strings command is designed to find and print sequences of printable characters (strings) within a file, particularly useful when dealing with binary files that might contain embedded text.\n💡 Solution\nWe can see that data.txt contains binary matches when trying to grep\nHence, we can you strings to filter out the printable char in the file\nLevel 11 - Base64 coded ❓Description\nThe password for the next level is stored in the file data.txt, which contains base64 encoded data.\n📔Study\nSince I have been constantly encountering it, let’s take this good chance to have a more comprehensive understanding of base64 Encoding\nBase64 is an encoding scheme that transforms binary data ➡ printable chracters.\n🤔 WHY USE IT?\nsome systems are restricted to ASCII characters some characters having meaning that might differ from system to system 🤔 WHEN TO USE IT?\nimcompatible data is transmitted through network (eg. image attachement in emails) imcompatible data needs to be stored in files or cookies, etc. ⚠️ base64 is actually costly instrument - 33% larger of memory consumption. Hence despite of its usefulness, only use it when necessary Coming back to base64 command in linux 😯\nencoding\n$ echo -n 'Hello, World!' | base64 SGVsbG8sIFdvcmxkIQ== decoding\n$ base64 -d \u003c\u003c\u003c SGVsbG8sIFdvcmxkIQo= Hello, World! 💡 Solution\nLet’s look into data.txt raw content:\nbandit10@bandit:~$ cat data.txt VGhlIHBhc3N3b3JkIGlzIGR0UjE3M2ZaS2IwUlJzREZTR3NnMlJXbnBOVmozcVJyCg== 💭 As you can tell base64 encoded string ends in == now, use base64 command to decode this\nbandit10@bandit:~$ base64 -d \u003c\u003c\u003c cat data.txt The password is dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr Level 12 - ROT13 ❓Description\nThe password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions\n📔Study\nROT13 is a simple letter substitution cipher that replaces a letter with the 13th letter after it in the Latin alphabet.\nOne of the earliest form of crytography as it is developed way back in ancient Rome ;p\n💡 Solution\nLevel 13 - Hexdump ❓Description\nThe password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work. Use mkdir with a hard to guess directory name. Or better, use the command “mktemp -d”. Then copy the datafile using cp, and rename it using mv (read the manpages!)\n📔Study\nFile signature\n📁 is a unique dequence of bytes at the beginning of a file that identifies its format,even if the file extension is missing/incorrect\n📁 You can find these signature at the beginning of the file\nExample\n- JEPG file: FF D8 FF E0\n- PDF file: 25 50 44 46\n- Windows exec file: 4D 5A\n📁We can analyse file signature by comparing the digital signatures of files against a database of known malicious signatures to identify and flag potentially harmful or suspicious files.\n❓ Why is file signature important\nfor computer to determine the correct application to open a file ensure data integrity from corruption or tampering use to identify and prevent malware HexDumps\n🔢is a textual representation of computar data (typically binary), in hexdecimal format\n🔢How to read\n00000000 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 Hello world! 00000000 is the hexadecimal address. 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 are the hexadecimal values of the bytes. Hello world! is the ASCII representation of the bytes. 🔢xxd command\nused for creating and analyzing hexadecimal dumps from files example xxd hello.txt \u003e hexdump.txt: converting hello.txt into hexdump and store in hexdump.txt xxd -r hexdump.txt \u003e reversed.txt: reverse back 💡 Solution\nThis is a hard level 💀 Let’s break down into steps for easier intepretation.\nSTEP 1: MAKE TEMP DIR\nAs advised I create a temporary directory to store the files in the process of solving, using mktemp\nThen copy cp data.txt from home directory and rename it mv for easier refence\nSTEP 2: GZIP FILE\nFirst inspect the hexdump file, we can idenitfy the file signature 1f8b\nBy looking up the list of file signature, we can recognize that the file is a gzip file, what we have to do is decompress it.\nIn order to decompress, we first have to reverse hexdump.txt and rename the right extension to reverse\nbandit12@bandit:/tmp/tmp.3Afnq04SOj$ xxd -r hexdump.txt reversed bandit12@bandit:/tmp/tmp.3Afnq04SOj$ ls hexdump.txt reversed bandit12@bandit:/tmp/tmp.3Afnq04SOj$ mv reversed reversed.gz # rename with right extension By decompressing reversed.gz using gzip -d we get\nLet’s hexdump view of our decompressed file, we get 425a file signature, by checking up\nSTEP 3: BZIP2 FILE\nFollow the same procedure~\n✅ rename to right extension: mv reversed reversed.bz2\n✅ decompres: bzip2 -d reversed.bz2\n✅ inspect the new file: cat\n✅ check for file signature: xxd reversed hmm… seems like another gzip file\nSTEP 4: ANOTHER GZIP FILE\nsame process, we get we can see data5.bin appearing, and 6461 seems to not be in the list…\nMaybe I can try using file command to inspect\nSTEP 5: TAR ARCHIVE\nGot it, the reversed file is a tar achieve object\nBy decompressing it with tar -xvf reversed, we see data5.bin being extracted out\nRepeat it with data5.bin comes out data6.bin (it’s a rabit hole legit😣)\nSTEP 6: ANOTHER TAR ARCHIVE\nBy checking the content of data6.bin, still doesn’t look right (haih) So, continue extracting data6.bin (out of words) Discovering data8.bin (yay)\nSTEP 6: LAST GZIP FILE\nUsing file command we know data8 is gzip, just decompress 👏🏼👏🏼👏🏼GET\nℹ️ You can determine that it will likely be one of those formats by looking at the first few bytes. You should then test to see if it is one of those, using an integrity check from the associated utility for that format, or by actually proceeding to decompress. Level 14 - COPY PRIVATE KEY TO LOCAL ❓Description\nThe password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on\n📔Study\nIf we want to transfer files from remote host to local host, how do we do? 🤔\nAns: scp command\nSecure Copy (scp)\nused for securely transferring files between a local and remote system, or between two remote systems, using SSH for encryption and authentication Syntax:\nscp [options] [[user@]src_host:]file1 [[user@]dest_host:]file2 [options]: flags to customize the command [user@]src_host:: Specifies the source host (IP address or domain name) and optionally the username for authentication. file1: The file or directory to be copied from the source. [[user@]dest_host:]file2: Specifies the destination host and optionally the username for authentication, and the destination path or filename. Flags:\n🚩-r: Recursively copies entire directories and their contents.\n🚩-P \u003cport\u003e: Specifies the port number to use for the SSH connection.\n🚩-i \u003cidentity_file\u003e: Uses a specific private key file for authentication instead of the default SSH key.\n🚩-p: Preserves modification times, access times, and ownership.\n💡 Solution\nBasically in the description we know the key to log into next level is using private SSH key, unlike other levels’ password authentication approach.\nNow transfer the sshkey.private from the remote server to our local machine:\n$ scp -P 2220 bandit13@bandit.labs.overthewire.org:sshkey.private . This is a OverTheWire game server. More information on http://www.overthewire.org/wargames bandit13@bandit.labs.overthewire.org's password: sshkey.private Now the file is in my local file system Now I tried logging in the next level using the copied private key file, but getting below error Permissions are too open, as said. Now I have to reduce the permissions with chmod command:\nWith chmod 700, I basically limit read write execute permission to only for owner\nNow use ssh with -i option to log in\n$ ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220 "},"title":"Level 10 - 14"},"/hanshin-cyber/write-ups/overthewire/bandit/part-4/":{"data":{"":"","level-15---sending-message-to-port#Level 15 - Sending Message to Port":"","level-16---secure-connection-with-ssl#Level 16 - Secure Connection with SSL":"","level-17--#Level 17 -":"Level 15 - Sending Message to Port ❓Description\nThe password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.\n📔Study\nSince we are at server-machine communication, it’s a good establishment on looking into network terminologies\n🌐 IP address:\n.. is a numerical label assigned to device connected to computer network\n.. functions -\u003e network interface identification, and location addressing\n🌐 localhost:\n.. a hostname that refers to the current computer used to access it\n.. IPv4 network standards reserve the entire address block 127.0.0.0/8 for loopback purposes\n.. 127.0.0.1 is the standard address for IPv4 loopback traffic\n🌐 ports:\n.. each port is assigned for certain service that the server provide\n.. some common port numbers /source In terms of network communication, there is an important “swiss army knife” the handy command:\nNetcat nc\nnc functions include:\nnetwork communication (establish TCP UDP connections) port scanning file transfer network debugging port listening simple chat room syntax:\nnc [options] \u003chost\u003e \u003cport\u003e options:\n🚩-u: Use UDP instead of TCP.\n🚩-v: Enable verbose mode for more detailed output.\n🚩-z: Enable zero-I/O mode (used for scanning ports).\n🚩-e \u003ccommand\u003e: Execute a command on the remote host when a connection is established (advanced use).\n🚩-p “port”: Specify the source port to use.\n🚩--source “host”: Specify the source IP address.\n🚩-g \u003chop1, hop2,...\u003e: Set the source routing path.\n💡 Solution\nThe key task here, is to communicate with a dedicated port - 30000.\nFrom above;\nFind password for bandit14 level, we can find in the directory specified in level 14 which is /etc/bandit_pass/bandit14 Echo the password after establishing nc connection, as mentioned above the default address for localhost is 127.0.0.1 Level 16 - Secure Connection with SSL ❓Description\nThe password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.\n📔Study\n🔐 OpenSLL\nis a cryptographic library that enables an open source implementation of Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols\nIt’s function includes\nencrypt data certificate management secure web server deployment random numer generation 🤔 What is the difference between netcat and OpenSSL s_client? 💡 Solution\nEstablish secure connection using openSSL with openssl command\nopenssl s_client -connect localhost:30001 By sending the password for current level, the server then responds back with password for next level:)\\\nLevel 17 - ❓Description\nThe credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL/TLS and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.\n📔Study\nThis level involves 🔍port scanning🔍\nPort scanning is a technique used to identify which ports on a target server are open, which indicate potential vulnerabilities and services running on those ports.\nHow the scanning works?\nPort scanners send packets to a range of ports (0-65535) and analyze the responses to determine which ports are open, closed, or filtered. Open ports indicate that a service or application is listening on that port, while closed ports indicate that no service is listening. Filtered ports indicate that a firewall or other security device is blocking access to those ports. Some common port scanning tools include: Nmap, Netcat, PortSentry, etc\nWe dive more into Network Mapper, famously known as nmap~\nIt offers a lot of advantages:\nquickly recognize the devices (like servers, routers, switches, etc)on single or multiple networks identify services running on a system detect application versions to detect existing vulnerabilities find info about the operating system running Read more in Nmap Commands Cheat Sheet"},"title":"Level 15 - 19"}}